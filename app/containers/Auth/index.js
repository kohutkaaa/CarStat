import React, { memo, useState, useEffect } from 'react';
import { Redirect } from "react-router-dom";
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';

import { useInjectSaga } from 'utils/injectSaga';
import { useInjectReducer } from 'utils/injectReducer';
import makeSelectAuth from './selectors';
import { selectUser } from '../App/selectors';
import reducer from './reducer';
import saga from './saga';
import { setDataLogin, makeLogin } from './actions';

export function Auth({
  state,
  setDataLogin,
  makeLogin,
  user
}) {
  useInjectReducer({ key: 'auth', reducer });
  useInjectSaga({ key: 'auth', saga });

  const [showPass, setShowPass] = useState(false);
  const [invalidEmail, setInvalidEmail] = useState(false);
  const [invalidPassword, setInvalidPassword] = useState(false);

  useEffect(() => {
    console.log('state', state);
    console.log('user', user);
  }, [state, user])

  const errorInput = () => {
    if (!state.dataLogin) {
      setInvalidEmail(true)
      setInvalidPassword(true)
      return;
    }
    if (!state.dataLogin.identifier )  {
      setInvalidEmail(true)
      return;
    }
    if (!state.dataLogin.password) {
      setInvalidPassword(true)
      return;
    } else{
      makeLogin()
      setInvalidEmail(false)
      setInvalidPassword(false)
    }
  }

  return (
    <>
     { user && user.logined === true &&
        <>
          <Redirect
            push
            to={{
              pathname: '/dashboard/'
            }}
          />
        </>
      }
      <div className=" row">
        <div className="col-7 p-5">
          <h5 className="text-center text-uppercase mt-5 ">–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ  
            <span className="badge bg-label-primary p-2 rounded mx-2">
              Car Statistics
            </span>
            - –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ –≤–∏—Ç—Ä–∞—Ç!</h5>
          <h6 className="mt-4 text-center text-uppercase text-muted">
            –¶–µ–π –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, —â–æ–± –¥–æ–ø–æ–º–æ–≥—Ç–∏ 
            –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å. 
            <br/>
            –í—ñ–Ω –¥–∞—î –≤–∞–º –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å 
            –ª–µ–≥–∫–æ —ñ –∑—Ä—É—á–Ω–æ –≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ—ó—Ö –≤–∏—Ç—Ä–∞—Ç.
          </h6>
          <div className="help-center-knowledge-base  help-center-bg-alt bg-help-center mt-5">
            <div className="container-xl ps-0">
              <div className="row">
                <div className="col-lg-12">
                  <div className="row">
                    <div className="col-md-4 col-sm-6 mb-4">
                      <div className="card">
                        <div className="card-body">
                          <div className="d-flex align-items-center mb-2">
                            <span className="badge bg-label-success p-2 rounded me-2">
                              <i className="ti ti-wallet ti-sm"></i>
                            </span>
                            <h5 className="fw-semibold mt-3 ms-1">–ö–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏:  </h5>
                          </div>
                          <ul className='px-0 text-center'>
                              <span className="text-muted py-1"> 
                                –î–æ–ø–æ–º–∞–≥–∞—î –∫–µ—Ä—É–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–∞–º–∏ —Ç–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Å–ø–æ—Å–æ–±–∏ –µ–∫–æ–Ω–æ–º—ñ—ó.
                              </span>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-4 col-sm-6 mb-4">
                      <div className="card">
                        <div className="card-body">
                          <div className="d-flex align-items-center mb-2">
                            <span className="badge bg-label-info p-2 rounded me-2">
                              <i className="ti ti-device-laptop ti-sm"></i>
                            </span>
                            <h5 className="fw-semibold mt-3 ms-1">–ó—Ä—É—á–Ω–∏–π –¥–æ—Å—Ç—É–ø: </h5>
                          </div>
                          <ul className='px-0 text-center'>
                              <span className="text-muted py-1"> 
                                –õ–µ–≥–∫–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
                              </span>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-4 col-sm-6 mb-4">
                      <div className="card">
                        <div className="card-body">
                          <div className="d-flex align-items-center mb-2">
                            <span className="badge bg-label-primary p-2 rounded me-2">
                              <i className="ti ti-car ti-sm"></i>
                            </span>
                            <h5 className="fw-semibold mt-3 ms-1">–î–µ–∫—ñ–ª—å–∫–∞ –∞–≤—Ç–æ: </h5>
                          </div>
                          <ul className='px-0 text-center'>
                              <span className="text-muted py-1"> 
                                –í–µ–¥–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∞–≤—Ç–æ –æ–¥–Ω–æ—á–∞—Å–Ω–æ.
                              </span>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-4 col-sm-6 mb-4">
                      <div className="card">
                        <div className="card-body">
                          <div className="d-flex align-items-center mb-2">
                            <span className="badge bg-label-warning p-2 rounded me-2">
                              <i className="ti ti-chart-line ti-sm"></i>
                            </span>
                            <h5 className="fw-semibold mt-3 ms-1">–°–ø—ñ–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: </h5>
                          </div>
                          <ul className='px-0 text-center'>
                              <span className="text-muted py-1"> 
                                –ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –≤—Å—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ.
                              </span>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-4 col-sm-6 mb-4">
                      <div className="card">
                        <div className="card-body">
                          <div className="d-flex align-items-center mb-2">
                            <span className="badge bg-label-secondary p-2 rounded me-2">
                              <i className="ti ti-mail ti-sm"></i>
                            </span>
                            <h5 className="fw-semibold mt-3 ms-1">–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: </h5>
                          </div>
                          <ul className='px-0 text-center'>
                              <span className="text-muted py-1"> 
                                –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏, —Ç–∞–∫—ñ —è–∫ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞.
                              </span>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div className="col-md-4 col-sm-6 mb-4">
                      <div className="card">
                        <div className="card-body">
                          <div className="d-flex align-items-center mb-2">
                            <span className="badge bg-label-danger p-2 rounded me-2">
                              <i className="ti ti-businessplan ti-sm"></i>
                            </span>
                            <h5 className="fw-semibold mt-3 ms-1">–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è –≤–∏—Ç—Ä–∞—Ç:  </h5>
                          </div>
                          <ul className='px-0 text-center'>
                              <span className="text-muted py-1"> 
                                –ó—Ä—É—á–Ω–æ –æ—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ —ñ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –∞–≤—Ç–æ.
                              </span>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="d-flex col-5 align-items-center p-4 card">
          <div className="w-px-400 mx-auto">
            <div className="app-brand mb-4 mt-5">
              <span className="app-brand-logo ">
                <div className="d-flex  ">
                  <img style={{ width: '400px' }} src={require('../../images/logo2.png')}  />
                </div>
              </span>
            </div>
            <h3 className="mb-1 fw-bold">–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ <br/> CAR STATISTICS! üëã</h3><br/>
            <p className="mb-4">–£–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å —É –ø–æ–¥–æ—Ä–æ–∂ —Ä–∞–∑–æ–º –∑ —Ç—Ä–µ–∫–µ—Ä–æ–º –≤–∏—Ç—Ä–∞—Ç!</p>
            <div>
              <div className="mb-3 ">
                <label className="form-label">Email</label>
                <input 
                  type="text" 
                  className="form-control" 
                  id="email" 
                  name="identifier" 
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏"
                  onChange={(e) => {
                    setDataLogin(e.target.name, e.target.value)
                  }}
                />
                {invalidEmail === true &&
                <div className="text-danger">
                  –≤–≤–µ–¥—ñ—Ç—å Email!
                </div>}
              </div>
              <div className="mb-3 ">
                <div className="d-flex justify-content-between">
                  <label className="form-label">–ü–∞—Ä–æ–ª—å</label>
                </div>
                <div className="input-group input-group-merge ">
                  <input 
                    type={showPass ? 'text' : 'password'} 
                    id="password" 
                    className="form-control" 
                    name="password" 
                    placeholder="¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑" 
                    aria-describedby="password"
                    onChange={(e) => {
                      setDataLogin(e.target.name, e.target.value)
                    }}
                  />
                  <span className="input-group-text cursor-pointer">
                    <i 
                      className={showPass ? "ti ti-eye-off" : "ti ti-eye"} 
                      onClick={() => {setShowPass(!showPass)}}
                    >
                    </i>
                  </span>
                </div>
                {invalidPassword === true &&
                <div className="text-danger">
                  –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å!
                </div>}
              </div>
              {state.error !== false &&
                <div className="text-danger mb-3">
                  –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–±–æ email!!!
                </div>}
              <button 
                className="btn btn-primary w-100 "
                onClick={() => {errorInput()}}
              >
                –í–≤—ñ–π—Ç–∏
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

Auth.propTypes = {
  setDataLogin: PropTypes.func.isRequired,
  makeLogin: PropTypes.func.isRequired,
  user: PropTypes.oneOfType([ PropTypes.bool, PropTypes.object]),
  state: PropTypes.oneOfType([ PropTypes.bool, PropTypes.object]),
};

const mapStateToProps = createStructuredSelector({
  state: makeSelectAuth(),
  user: selectUser(),
});

function mapDispatchToProps(dispatch) {
  return {
    setDataLogin: (key, value) => { dispatch(setDataLogin(key, value)) },
    makeLogin: () => { dispatch(makeLogin()) },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)(Auth);
